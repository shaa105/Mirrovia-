{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "38ffaa15",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-04-23T11:03:50.381174Z",
     "iopub.status.busy": "2025-04-23T11:03:50.380082Z",
     "iopub.status.idle": "2025-04-23T11:03:50.385399Z",
     "shell.execute_reply": "2025-04-23T11:03:50.384688Z",
     "shell.execute_reply.started": "2025-04-23T10:20:01.265352Z"
    },
    "papermill": {
     "duration": 0.02556,
     "end_time": "2025-04-23T11:03:50.385584",
     "exception": false,
     "start_time": "2025-04-23T11:03:50.360024",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "# Import necessary libraries\n",
    "# Competition Goal: \n",
    "# For each customer within the training data we need to predict up to 12 products that the customer will buy in the next 7-day period after the training time period.\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "from pathlib import Path\n",
    "\n",
    "# Define the path to the dataset folder\n",
    "data_path = Path('/kaggle/input/h-and-m-personalized-fashion-recommendations/')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "da47ad87",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-23T11:03:50.409867Z",
     "iopub.status.busy": "2025-04-23T11:03:50.409069Z",
     "iopub.status.idle": "2025-04-23T11:05:09.617923Z",
     "shell.execute_reply": "2025-04-23T11:05:09.617097Z",
     "shell.execute_reply.started": "2025-04-23T10:20:01.272839Z"
    },
    "papermill": {
     "duration": 79.223531,
     "end_time": "2025-04-23T11:05:09.618211",
     "exception": false,
     "start_time": "2025-04-23T11:03:50.394680",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Load the transactions data (set article_id as string to preserve leading zeros)\n",
    "df = pd.read_csv(\n",
    "    data_path / 'transactions_train.csv',\n",
    "    # set dtype or pandas will drop the leading '0' and convert to int\n",
    "    dtype={'article_id': str} \n",
    ")\n",
    "\n",
    "# Load the sample submission file (used for formatting predictions)\n",
    "submission = pd.read_csv(data_path / 'sample_submission.csv')\n",
    "#transactions_train.csv: Full purchase history\n",
    "#sample_submission.csv: Format for final predictions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "8eb1c354",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-23T11:05:09.654918Z",
     "iopub.status.busy": "2025-04-23T11:05:09.648492Z",
     "iopub.status.idle": "2025-04-23T11:05:09.674869Z",
     "shell.execute_reply": "2025-04-23T11:05:09.675360Z",
     "shell.execute_reply.started": "2025-04-23T10:21:34.980824Z"
    },
    "papermill": {
     "duration": 0.044904,
     "end_time": "2025-04-23T11:05:09.675526",
     "exception": false,
     "start_time": "2025-04-23T11:05:09.630622",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(31788324, 5)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>t_dat</th>\n",
       "      <th>customer_id</th>\n",
       "      <th>article_id</th>\n",
       "      <th>price</th>\n",
       "      <th>sales_channel_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2018-09-20</td>\n",
       "      <td>000058a12d5b43e67d225668fa1f8d618c13dc232df0ca...</td>\n",
       "      <td>0663713001</td>\n",
       "      <td>0.050831</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2018-09-20</td>\n",
       "      <td>000058a12d5b43e67d225668fa1f8d618c13dc232df0ca...</td>\n",
       "      <td>0541518023</td>\n",
       "      <td>0.030492</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2018-09-20</td>\n",
       "      <td>00007d2de826758b65a93dd24ce629ed66842531df6699...</td>\n",
       "      <td>0505221004</td>\n",
       "      <td>0.015237</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2018-09-20</td>\n",
       "      <td>00007d2de826758b65a93dd24ce629ed66842531df6699...</td>\n",
       "      <td>0685687003</td>\n",
       "      <td>0.016932</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2018-09-20</td>\n",
       "      <td>00007d2de826758b65a93dd24ce629ed66842531df6699...</td>\n",
       "      <td>0685687004</td>\n",
       "      <td>0.016932</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        t_dat                                        customer_id  article_id  \\\n",
       "0  2018-09-20  000058a12d5b43e67d225668fa1f8d618c13dc232df0ca...  0663713001   \n",
       "1  2018-09-20  000058a12d5b43e67d225668fa1f8d618c13dc232df0ca...  0541518023   \n",
       "2  2018-09-20  00007d2de826758b65a93dd24ce629ed66842531df6699...  0505221004   \n",
       "3  2018-09-20  00007d2de826758b65a93dd24ce629ed66842531df6699...  0685687003   \n",
       "4  2018-09-20  00007d2de826758b65a93dd24ce629ed66842531df6699...  0685687004   \n",
       "\n",
       "      price  sales_channel_id  \n",
       "0  0.050831                 2  \n",
       "1  0.030492                 2  \n",
       "2  0.015237                 2  \n",
       "3  0.016932                 2  \n",
       "4  0.016932                 2  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check the shape of the transactions DataFrame and preview the data\n",
    "print(df.shape)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "e47df786",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-23T11:05:12.452293Z",
     "iopub.status.busy": "2025-04-23T11:05:10.581935Z",
     "iopub.status.idle": "2025-04-23T11:05:18.345095Z",
     "shell.execute_reply": "2025-04-23T11:05:18.344356Z",
     "shell.execute_reply.started": "2025-04-23T10:21:35.007543Z"
    },
    "papermill": {
     "duration": 8.660365,
     "end_time": "2025-04-23T11:05:18.345263",
     "exception": false,
     "start_time": "2025-04-23T11:05:09.684898",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df['t_dat'] = pd.to_datetime(df['t_dat'])\n",
    "#df_3w: Transactions in the last 3 weeks\n",
    "#df_2w: Last 2 weeks\n",
    "#df_1w: Last 1 week"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "cfcca6c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-23T11:05:18.374770Z",
     "iopub.status.busy": "2025-04-23T11:05:18.373973Z",
     "iopub.status.idle": "2025-04-23T11:05:18.965613Z",
     "shell.execute_reply": "2025-04-23T11:05:18.966095Z",
     "shell.execute_reply.started": "2025-04-23T10:21:41.871049Z"
    },
    "papermill": {
     "duration": 0.609527,
     "end_time": "2025-04-23T11:05:18.966286",
     "exception": false,
     "start_time": "2025-04-23T11:05:18.356759",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Filter transactions that occurred in the last 3, 2, and 1 weeks before cutoff (2020-09-22)\n",
    "df_3w = df[df['t_dat'] >= pd.to_datetime('2020-08-31')].copy()\n",
    "df_2w = df[df['t_dat'] >= pd.to_datetime('2020-09-07')].copy()\n",
    "df_1w = df[df['t_dat'] >= pd.to_datetime('2020-09-15')].copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "64d5b6ac",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-23T11:05:19.023791Z",
     "iopub.status.busy": "2025-04-23T11:05:19.002888Z",
     "iopub.status.idle": "2025-04-23T11:05:20.600936Z",
     "shell.execute_reply": "2025-04-23T11:05:20.601520Z",
     "shell.execute_reply.started": "2025-04-23T10:21:42.459193Z"
    },
    "papermill": {
     "duration": 1.626006,
     "end_time": "2025-04-23T11:05:20.601687",
     "exception": false,
     "start_time": "2025-04-23T11:05:18.975681",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "196319\n"
     ]
    }
   ],
   "source": [
    "# Initialize a dictionary to store purchase history from the last 3 weeks\n",
    "purchase_dict_3w = {}\n",
    "\n",
    "# Loop through each transaction in the last 3 weeks\n",
    "for i,x in enumerate(zip(df_3w['customer_id'], df_3w['article_id'])):\n",
    "    cust_id, art_id = x\n",
    "\n",
    "    # Create a new customer entry if not already in the dict\n",
    "    if cust_id not in purchase_dict_3w:\n",
    "        purchase_dict_3w[cust_id] = {}\n",
    "\n",
    "    # Initialize the article count if not already present\n",
    "    if art_id not in purchase_dict_3w[cust_id]:\n",
    "        purchase_dict_3w[cust_id][art_id] = 0\n",
    "\n",
    "    # Increment the count for this article\n",
    "    purchase_dict_3w[cust_id][art_id] += 1\n",
    "\n",
    "# Print number of unique customers with purchase history in last 3 weeks\n",
    "print(len(purchase_dict_3w))\n",
    "\n",
    "# Get the 12 most frequently purchased articles in the last 3 weeks (used as fallback recommendations)\n",
    "dummy_list_3w = list((df_3w['article_id'].value_counts()).index)[:12]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "c3c0d017",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-23T11:05:20.675018Z",
     "iopub.status.busy": "2025-04-23T11:05:20.648940Z",
     "iopub.status.idle": "2025-04-23T11:05:21.522897Z",
     "shell.execute_reply": "2025-04-23T11:05:21.523515Z",
     "shell.execute_reply.started": "2025-04-23T10:21:43.909520Z"
    },
    "papermill": {
     "duration": 0.912624,
     "end_time": "2025-04-23T11:05:21.523694",
     "exception": false,
     "start_time": "2025-04-23T11:05:20.611070",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "143455\n"
     ]
    }
   ],
   "source": [
    "# Repeat the same logic for 2 weeks\n",
    "purchase_dict_2w = {}\n",
    "\n",
    "for i,x in enumerate(zip(df_2w['customer_id'], df_2w['article_id'])):\n",
    "    cust_id, art_id = x\n",
    "    if cust_id not in purchase_dict_2w:\n",
    "        purchase_dict_2w[cust_id] = {}\n",
    "    \n",
    "    if art_id not in purchase_dict_2w[cust_id]:\n",
    "        purchase_dict_2w[cust_id][art_id] = 0\n",
    "    \n",
    "    purchase_dict_2w[cust_id][art_id] += 1\n",
    "    \n",
    "print(len(purchase_dict_2w))\n",
    "\n",
    "dummy_list_2w = list((df_2w['article_id'].value_counts()).index)[:12]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "1260ce68",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-23T11:05:21.592966Z",
     "iopub.status.busy": "2025-04-23T11:05:21.587870Z",
     "iopub.status.idle": "2025-04-23T11:05:21.952773Z",
     "shell.execute_reply": "2025-04-23T11:05:21.952192Z",
     "shell.execute_reply.started": "2025-04-23T10:21:44.934145Z"
    },
    "papermill": {
     "duration": 0.416415,
     "end_time": "2025-04-23T11:05:21.952915",
     "exception": false,
     "start_time": "2025-04-23T11:05:21.536500",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "75481\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# Repeat the same logic for 1 week\n",
    "purchase_dict_1w = {}\n",
    "\n",
    "for i,x in enumerate(zip(df_1w['customer_id'], df_1w['article_id'])):\n",
    "    cust_id, art_id = x\n",
    "    if cust_id not in purchase_dict_1w:\n",
    "        purchase_dict_1w[cust_id] = {}\n",
    "    \n",
    "    if art_id not in purchase_dict_1w[cust_id]:\n",
    "        purchase_dict_1w[cust_id][art_id] = 0\n",
    "    \n",
    "    purchase_dict_1w[cust_id][art_id] += 1\n",
    "    \n",
    "print(len(purchase_dict_1w))\n",
    "\n",
    "dummy_list_1w = list((df_1w['article_id'].value_counts()).index)[:12]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "e87ffc76",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-23T11:05:21.986968Z",
     "iopub.status.busy": "2025-04-23T11:05:21.985935Z",
     "iopub.status.idle": "2025-04-23T11:05:21.990537Z",
     "shell.execute_reply": "2025-04-23T11:05:21.991210Z",
     "shell.execute_reply.started": "2025-04-23T10:21:45.341630Z"
    },
    "papermill": {
     "duration": 0.027708,
     "end_time": "2025-04-23T11:05:21.991384",
     "exception": false,
     "start_time": "2025-04-23T11:05:21.963676",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1371980, 2)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customer_id</th>\n",
       "      <th>prediction</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>00000dbacae5abe5e23885899a1fa44253a17956c6d1c3...</td>\n",
       "      <td>0706016001 0706016002 0372860001 0610776002 07...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0000423b00ade91418cceaf3b26c6af3dd342b51fd051e...</td>\n",
       "      <td>0706016001 0706016002 0372860001 0610776002 07...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>000058a12d5b43e67d225668fa1f8d618c13dc232df0ca...</td>\n",
       "      <td>0706016001 0706016002 0372860001 0610776002 07...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>00005ca1c9ed5f5146b52ac8639a40ca9d57aeff4d1bd2...</td>\n",
       "      <td>0706016001 0706016002 0372860001 0610776002 07...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>00006413d8573cd20ed7128e53b7b13819fe5cfc2d801f...</td>\n",
       "      <td>0706016001 0706016002 0372860001 0610776002 07...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                         customer_id  \\\n",
       "0  00000dbacae5abe5e23885899a1fa44253a17956c6d1c3...   \n",
       "1  0000423b00ade91418cceaf3b26c6af3dd342b51fd051e...   \n",
       "2  000058a12d5b43e67d225668fa1f8d618c13dc232df0ca...   \n",
       "3  00005ca1c9ed5f5146b52ac8639a40ca9d57aeff4d1bd2...   \n",
       "4  00006413d8573cd20ed7128e53b7b13819fe5cfc2d801f...   \n",
       "\n",
       "                                          prediction  \n",
       "0  0706016001 0706016002 0372860001 0610776002 07...  \n",
       "1  0706016001 0706016002 0372860001 0610776002 07...  \n",
       "2  0706016001 0706016002 0372860001 0610776002 07...  \n",
       "3  0706016001 0706016002 0372860001 0610776002 07...  \n",
       "4  0706016001 0706016002 0372860001 0610776002 07...  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check shape and sample of the submission file\n",
    "print(submission.shape)\n",
    "submission.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "c7752004",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-23T11:05:22.029173Z",
     "iopub.status.busy": "2025-04-23T11:05:22.021420Z",
     "iopub.status.idle": "2025-04-23T11:05:24.674907Z",
     "shell.execute_reply": "2025-04-23T11:05:24.674249Z",
     "shell.execute_reply.started": "2025-04-23T10:21:45.356944Z"
    },
    "papermill": {
     "duration": 2.672837,
     "end_time": "2025-04-23T11:05:24.675286",
     "exception": false,
     "start_time": "2025-04-23T11:05:22.002449",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1371980, 2)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customer_id</th>\n",
       "      <th>prediction</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>00000dbacae5abe5e23885899a1fa44253a17956c6d1c3...</td>\n",
       "      <td>0568601043 0751471001 0909370001 0915526001 09...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0000423b00ade91418cceaf3b26c6af3dd342b51fd051e...</td>\n",
       "      <td>0909370001 0924243001 0918522001 0448509014 07...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>000058a12d5b43e67d225668fa1f8d618c13dc232df0ca...</td>\n",
       "      <td>0794321007 0924243001 0924243002 0923758001 09...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>00005ca1c9ed5f5146b52ac8639a40ca9d57aeff4d1bd2...</td>\n",
       "      <td>0909370001 0924243001 0918522001 0448509014 07...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>00006413d8573cd20ed7128e53b7b13819fe5cfc2d801f...</td>\n",
       "      <td>0909370001 0924243001 0918522001 0448509014 07...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                         customer_id  \\\n",
       "0  00000dbacae5abe5e23885899a1fa44253a17956c6d1c3...   \n",
       "1  0000423b00ade91418cceaf3b26c6af3dd342b51fd051e...   \n",
       "2  000058a12d5b43e67d225668fa1f8d618c13dc232df0ca...   \n",
       "3  00005ca1c9ed5f5146b52ac8639a40ca9d57aeff4d1bd2...   \n",
       "4  00006413d8573cd20ed7128e53b7b13819fe5cfc2d801f...   \n",
       "\n",
       "                                          prediction  \n",
       "0  0568601043 0751471001 0909370001 0915526001 09...  \n",
       "1  0909370001 0924243001 0918522001 0448509014 07...  \n",
       "2  0794321007 0924243001 0924243002 0923758001 09...  \n",
       "3  0909370001 0924243001 0918522001 0448509014 07...  \n",
       "4  0909370001 0924243001 0918522001 0448509014 07...  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "not_so_fancy_but_fast_benchmark = submission[['customer_id']]\n",
    "prediction_list = []\n",
    "\n",
    "dummy_list = list((df_2w['article_id'].value_counts()).index)[:12]\n",
    "dummy_pred = ' '.join(dummy_list)\n",
    "\n",
    "for i, cust_id in enumerate(submission['customer_id'].values.reshape((-1,))):\n",
    "    if cust_id in purchase_dict_1w:\n",
    "        l = sorted((purchase_dict_1w[cust_id]).items(), key=lambda x: x[1], reverse=True)\n",
    "        l = [y[0] for y in l]\n",
    "        if len(l)>12:\n",
    "            s = ' '.join(l[:12])\n",
    "        else:\n",
    "            s = ' '.join(l+dummy_list_1w[:(12-len(l))])\n",
    "    elif cust_id in purchase_dict_2w:\n",
    "        l = sorted((purchase_dict_2w[cust_id]).items(), key=lambda x: x[1], reverse=True)\n",
    "        l = [y[0] for y in l]\n",
    "        if len(l)>12:\n",
    "            s = ' '.join(l[:12])\n",
    "        else:\n",
    "            s = ' '.join(l+dummy_list_2w[:(12-len(l))])\n",
    "    elif cust_id in purchase_dict_3w:\n",
    "        l = sorted((purchase_dict_3w[cust_id]).items(), key=lambda x: x[1], reverse=True)\n",
    "        l = [y[0] for y in l]\n",
    "        if len(l)>12:\n",
    "            s = ' '.join(l[:12])\n",
    "        else:\n",
    "            s = ' '.join(l+dummy_list_3w[:(12-len(l))])\n",
    "    else:\n",
    "        s = dummy_pred\n",
    "    prediction_list.append(s)\n",
    "\n",
    "not_so_fancy_but_fast_benchmark['prediction'] = prediction_list\n",
    "print(not_so_fancy_but_fast_benchmark.shape)\n",
    "not_so_fancy_but_fast_benchmark.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "58a75f45",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-23T11:05:24.706945Z",
     "iopub.status.busy": "2025-04-23T11:05:24.706071Z",
     "iopub.status.idle": "2025-04-23T11:05:35.606311Z",
     "shell.execute_reply": "2025-04-23T11:05:35.605573Z",
     "shell.execute_reply.started": "2025-04-23T10:21:47.640952Z"
    },
    "papermill": {
     "duration": 10.918299,
     "end_time": "2025-04-23T11:05:35.606457",
     "exception": false,
     "start_time": "2025-04-23T11:05:24.688158",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Save the final predictions DataFrame (created earlier) to a CSV file.\n",
    "# Each row contains a customer_id and a string of 12 predicted article_ids.\n",
    "# This file will be uploaded to Kaggle for evaluation.\n",
    "not_so_fancy_but_fast_benchmark.to_csv('not_so_fancy_but_fast_benchmark.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "69626974",
   "metadata": {
    "papermill": {
     "duration": 0.010524,
     "end_time": "2025-04-23T11:05:35.628608",
     "exception": false,
     "start_time": "2025-04-23T11:05:35.618084",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 3103714,
     "sourceId": 31254,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 30154,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 116.908736,
   "end_time": "2025-04-23T11:05:37.957993",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-04-23T11:03:41.049257",
   "version": "2.3.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
